{"version":3,"file":"index.js","sources":["../../src/components/decoration6/index.js"],"sourcesContent":["import React, { useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport useAutoResize from '../../use/autoResize'\r\n\r\nimport { randomExtend } from '../../util'\r\n\r\nimport './style.less'\r\n\r\nconst defaultColor = ['#7acaec', '#7acaec']\r\n\r\nconst svgWH = [300, 35]\r\n\r\nconst rowNum = 1\r\nconst rowPoints = 40\r\n\r\nconst rectWidth = 7\r\nconst halfRectWidth = rectWidth / 2\r\n\r\nfunction getPoints() {\r\n  const [w, h] = svgWH\r\n\r\n  const horizontalGap = w / (rowPoints + 1)\r\n  const verticalGap = h / (rowNum + 1)\r\n\r\n  let points = new Array(rowNum)\r\n    .fill(0)\r\n    .map((foo, i) =>\r\n      new Array(rowPoints)\r\n        .fill(0)\r\n        .map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)])\r\n    )\r\n\r\n  return points.reduce((all, item) => [...all, ...item], [])\r\n}\r\n\r\nfunction getData() {\r\n  const [, h] = svgWH\r\n\r\n  const heights = new Array(rowNum * rowPoints)\r\n    .fill(0)\r\n    .map(foo =>\r\n      Math.random() > 0.8\r\n        ? randomExtend(0.7 * h, h)\r\n        : randomExtend(0.2 * h, 0.5 * h)\r\n    )\r\n\r\n  const minHeights = new Array(rowNum * rowPoints)\r\n    .fill(0)\r\n    .map((foo, i) => heights[i] * Math.random())\r\n\r\n  const randoms = new Array(rowNum * rowPoints)\r\n    .fill(0)\r\n    .map(foo => Math.random() + 1.5)\r\n\r\n  return { heights, minHeights, randoms }\r\n}\r\n\r\nconst Decoration = ({ className, style, color = [] }) => {\r\n  const { width, height, domRef } = useAutoResize()\r\n\r\n  function calcSVGData() {\r\n    return {\r\n      ...getData(),\r\n      points: getPoints(),\r\n      svgScale: [width / svgWH[0], height / svgWH[1]]\r\n    }\r\n  }\r\n\r\n  const mergedColor = useMemo(() => deepMerge(deepClone(defaultColor, true), color || []), [color])\r\n\r\n  const { points, heights, minHeights, randoms, svgScale } = useMemo(\r\n    calcSVGData,\r\n    [width, height]\r\n  )\r\n\r\n  const classNames = useMemo(() => classnames('dv-decoration-6', className), [\r\n    [className]\r\n  ])\r\n\r\n  return (\r\n    <div className={classNames} style={style} ref={domRef}>\r\n      <svg\r\n        width={`${svgWH[0]}px`}\r\n        height={`${svgWH[1]}px`}\r\n        style={{ transform: `scale(${svgScale[0]},${svgScale[1]})` }}\r\n      >\r\n        {points.map((point, i) => (\r\n          <rect\r\n            key={i}\r\n            fill={mergedColor[Math.random() > 0.5 ? 0 : 1]}\r\n            x={point[0] - halfRectWidth}\r\n            y={point[1] - heights[i] / 2}\r\n            width={rectWidth}\r\n            height={heights[i]}\r\n          >\r\n            <animate\r\n              attributeName='y'\r\n              values={`${point[1] - minHeights[i] / 2};${point[1] -\r\n                heights[i] / 2};${point[1] - minHeights[i] / 2}`}\r\n              dur={`${randoms[i]}s`}\r\n              keyTimes='0;0.5;1'\r\n              calcMode='spline'\r\n              keySplines='0.42,0,0.58,1;0.42,0,0.58,1'\r\n              begin='0s'\r\n              repeatCount='indefinite'\r\n            />\r\n            <animate\r\n              attributeName='height'\r\n              values={`${minHeights[i]};${heights[i]};${minHeights[i]}`}\r\n              dur={`${randoms[i]}s`}\r\n              keyTimes='0;0.5;1'\r\n              calcMode='spline'\r\n              keySplines='0.42,0,0.58,1;0.42,0,0.58,1'\r\n              begin='0s'\r\n              repeatCount='indefinite'\r\n            />\r\n          </rect>\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n\r\nDecoration.propTypes = {\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  color: PropTypes.array\r\n}\r\n\r\nexport default Decoration\r\n"],"names":["defaultColor","svgWH","rowNum","rowPoints","rectWidth","halfRectWidth","getPoints","w","h","horizontalGap","verticalGap","points","Array","fill","map","foo","i","j","reduce","all","item","getData","heights","Math","random","randomExtend","minHeights","randoms","Decoration","className","style","color","useAutoResize","width","height","domRef","calcSVGData","mergedColor","useMemo","deepMerge","deepClone","svgScale","classNames","classnames","transform","point","propTypes","PropTypes","string","object","array"],"mappings":"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"}