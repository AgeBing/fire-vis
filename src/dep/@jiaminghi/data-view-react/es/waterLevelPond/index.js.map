{"version":3,"file":"index.js","sources":["../../src/components/waterLevelPond/index.js"],"sourcesContent":["import React, { useEffect, useRef, useMemo, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nimport { co } from '../../util'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Data\r\n   * @type {Array<Number>}\r\n   * @default data = []\r\n   * @example data = [60, 40]\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Shape of wanter level pond\r\n   * @type {String}\r\n   * @default shape = 'rect'\r\n   * @example shape = 'rect' | 'roundRect' | 'round'\r\n   */\r\n  shape: 'rect',\r\n  /**\r\n   * @description Water wave number\r\n   * @type {Number}\r\n   * @default waveNum = 3\r\n   */\r\n  waveNum: 3,\r\n  /**\r\n   * @description Water wave height (px)\r\n   * @type {Number}\r\n   * @default waveHeight = 40\r\n   */\r\n  waveHeight: 40,\r\n  /**\r\n   * @description Wave opacity\r\n   * @type {Number}\r\n   * @default waveOpacity = 0.4\r\n   */\r\n  waveOpacity: 0.4,\r\n  /**\r\n   * @description Colors (hex|rgb|rgba|color keywords)\r\n   * @type {Array<String>}\r\n   * @default colors = ['#00BAFF', '#3DE7C9']\r\n   * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n   */\r\n  colors: ['#3DE7C9', '#00BAFF'],\r\n  /**\r\n   * @description Formatter\r\n   * @type {String}\r\n   * @default formatter = '{value}%'\r\n   */\r\n  formatter: '{value}%'\r\n}\r\n\r\nfunction drawed({ shape: { points } }, { ctx, area }) {\r\n  const firstPoint = points[0]\r\n  const lastPoint = points.slice(-1)[0]\r\n\r\n  const h = area[1]\r\n\r\n  ctx.lineTo(lastPoint[0], h)\r\n  ctx.lineTo(firstPoint[0], h)\r\n\r\n  ctx.closePath()\r\n\r\n  ctx.fill()\r\n}\r\n\r\nfunction mergeOffset([x, y], [ox, oy]) {\r\n  return [x + ox, y + oy]\r\n}\r\n\r\nfunction calcSvgBorderGradient({ colors }) {\r\n  const colorNum = colors.length\r\n\r\n  const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n  return colors.map((c, i) => [colorOffsetGap * i, c])\r\n}\r\n\r\nfunction calcDetails({ data, formatter }) {\r\n  if (!data.length) {\r\n    return ''\r\n  }\r\n\r\n  const maxValue = Math.max(...data)\r\n\r\n  return formatter.replace('{value}', maxValue)\r\n}\r\n\r\nfunction getWaveShapes({ waveNum, waveHeight, data }, [w, h]) {\r\n  const pointsNum = waveNum * 4 + 4\r\n\r\n  const pointXGap = w / waveNum / 2\r\n\r\n  return data.map(v => {\r\n    let points = new Array(pointsNum).fill(0).map((foo, j) => {\r\n      const x = w - pointXGap * j\r\n\r\n      const startY = (1 - v / 100) * h\r\n\r\n      const y = j % 2 === 0 ? startY : startY - waveHeight\r\n\r\n      return [x, y]\r\n    })\r\n\r\n    points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\r\n\r\n    return { points }\r\n  })\r\n}\r\n\r\nfunction getWaveStyle({ colors, waveOpacity }, area) {\r\n  return {\r\n    gradientColor: colors,\r\n    gradientType: 'linear',\r\n    gradientParams: [0, 0, 0, area[1]],\r\n    gradientWith: 'fill',\r\n    opacity: waveOpacity,\r\n    translate: [0, 0]\r\n  }\r\n}\r\n\r\nfunction getWave(mergedConfig, renderer) {\r\n  const area = renderer.area\r\n  const shapes = getWaveShapes(mergedConfig, area)\r\n  const style = getWaveStyle(mergedConfig, area)\r\n\r\n  return shapes.map(shape =>\r\n    renderer.add({\r\n      name: 'smoothline',\r\n      animationFrame: 300,\r\n      shape,\r\n      style,\r\n      drawed\r\n    })\r\n  )\r\n}\r\n\r\nfunction * animationWave(waves, renderer) {\r\n  waves.forEach(graph => {\r\n    graph.attr('style', { translate: [0, 0] })\r\n\r\n    graph.animation(\r\n      'style',\r\n      {\r\n        translate: [renderer.area[0], 0]\r\n      },\r\n      true\r\n    )\r\n  })\r\n\r\n  yield renderer.launchAnimation()\r\n}\r\n\r\nconst WaterLevelPond = ({ config, className, style }) => {\r\n  const [renderer, setRenderer] = useState(null)\r\n\r\n  const gradientId = useRef(`water-level-pond-${Date.now()}`).current\r\n\r\n  const domRef = useRef(null)\r\n\r\n  const mergedConfig = useMemo(\r\n    () => deepMerge(deepClone(defaultConfig, true), config),\r\n    [config]\r\n  )\r\n\r\n  const svgBorderGradient = useMemo(() => calcSvgBorderGradient(mergedConfig), [\r\n    mergedConfig\r\n  ])\r\n\r\n  const details = useMemo(() => calcDetails(mergedConfig), [mergedConfig])\r\n\r\n  const radius = useMemo(() => {\r\n    const { shape } = mergedConfig\r\n\r\n    if (shape === 'round') return '50%'\r\n\r\n    if (shape === 'rect') return '0'\r\n\r\n    if (shape === 'roundRect') return '10px'\r\n\r\n    return '0'\r\n  }, [mergedConfig])\r\n\r\n  const shape = useMemo(() => {\r\n    const { shape } = mergedConfig\r\n\r\n    return shape || 'rect'\r\n  }, [mergedConfig])\r\n\r\n  useEffect(() => {\r\n    let innerRenderer = renderer\r\n\r\n    if (!renderer) {\r\n      innerRenderer = new CRender(domRef.current)\r\n\r\n      setRenderer(innerRenderer)\r\n    }\r\n\r\n    function * loop() {\r\n      yield new Promise(resolve => setTimeout(resolve, 30))\r\n\r\n      const wave = getWave(mergedConfig, innerRenderer)\r\n\r\n      while (true) {\r\n        yield * animationWave(wave, innerRenderer)\r\n\r\n        if (!innerRenderer.graphs.length) return\r\n      }\r\n    }\r\n\r\n    const undescribe = co(loop)\r\n\r\n    return () => {\r\n      innerRenderer.delAllGraph()\r\n\r\n      undescribe()\r\n    }\r\n  }, [mergedConfig])\r\n\r\n  const classNames = useMemo(\r\n    () => classnames('dv-water-pond-level', className),\r\n    [className]\r\n  )\r\n\r\n  return (\r\n    <div className={classNames} style={style}>\r\n      {!!renderer && (\r\n        <svg>\r\n          <defs>\r\n            <linearGradient id={gradientId} x1='0%' y1='0%' x2='0%' y2='100%'>\r\n              {svgBorderGradient.map(lc => (\r\n                <stop key={lc[0]} offset={lc[0]} stopColor={lc[1]} />\r\n              ))}\r\n            </linearGradient>\r\n          </defs>\r\n\r\n          <text\r\n            stroke={`url(#${gradientId})`}\r\n            fill={`url(#${gradientId})`}\r\n            x={renderer.area[0] / 2 + 8}\r\n            y={renderer.area[1] / 2 + 8}\r\n          >\r\n            {details}\r\n          </text>\r\n\r\n          {!shape || shape === 'round' ? (\r\n            <ellipse\r\n              cx={renderer.area[0] / 2 + 8}\r\n              cy={renderer.area[1] / 2 + 8}\r\n              rx={renderer.area[0] / 2 + 5}\r\n              ry={renderer.area[1] / 2 + 5}\r\n              stroke={`url(#${gradientId})`}\r\n            />\r\n          ) : (\r\n            <rect\r\n              x='2'\r\n              y='2'\r\n              rx={shape === 'roundRect' ? 10 : 0}\r\n              ry={shape === 'roundRect' ? 10 : 0}\r\n              width={renderer.area[0] + 12}\r\n              height={renderer.area[1] + 12}\r\n              stroke={`url(#${gradientId})`}\r\n            />\r\n          )}\r\n        </svg>\r\n      )}\r\n\r\n      <canvas ref={domRef} style={{ borderRadius: `${radius}` }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nWaterLevelPond.propTypes = {\r\n  config: PropTypes.object,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nWaterLevelPond.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default WaterLevelPond\r\n"],"names":["animationWave","defaultConfig","drawed","points","shape","ctx","area","firstPoint","lastPoint","slice","h","lineTo","closePath","fill","mergeOffset","x","y","ox","oy","calcSvgBorderGradient","colors","colorNum","length","colorOffsetGap","map","c","i","calcDetails","data","formatter","maxValue","Math","max","replace","getWaveShapes","waveNum","waveHeight","w","pointsNum","pointXGap","Array","foo","j","startY","v","p","getWaveStyle","waveOpacity","getWave","mergedConfig","renderer","shapes","style","add","waves","forEach","attr","translate","animation","launchAnimation","WaterLevelPond","config","className","useState","setRenderer","gradientId","useRef","Date","now","current","domRef","useMemo","deepMerge","deepClone","svgBorderGradient","details","radius","loop","innerRenderer","CRender","Promise","setTimeout","resolve","wave","graphs","undescribe","co","delAllGraph","classNames","classnames","lc","borderRadius","propTypes","PropTypes","object","string","defaultProps"],"mappings":"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"}