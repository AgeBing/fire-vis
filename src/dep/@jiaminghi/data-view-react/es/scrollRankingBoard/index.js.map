{"version":3,"file":"index.js","sources":["../../src/components/scrollRankingBoard/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classnames from 'classnames'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport useAutoResize from '../../use/autoResize'\r\nimport { co } from '../../util'\r\n\r\nimport './style.less'\r\n\r\nconst defaultConfig = {\r\n  /**\r\n   * @description Board data\r\n   * @type {Array<Object>}\r\n   * @default data = []\r\n   */\r\n  data: [],\r\n  /**\r\n   * @description Row num\r\n   * @type {Number}\r\n   * @default rowNum = 5\r\n   */\r\n  rowNum: 5,\r\n  /**\r\n   * @description Scroll wait time\r\n   * @type {Number}\r\n   * @default waitTime = 2000\r\n   */\r\n  waitTime: 2000,\r\n  /**\r\n   * @description Carousel type\r\n   * @type {String}\r\n   * @default carousel = 'single'\r\n   * @example carousel = 'single' | 'page'\r\n   */\r\n  carousel: 'single',\r\n  /**\r\n   * @description Value unit\r\n   * @type {String}\r\n   * @default unit = ''\r\n   * @example unit = 'ton'\r\n   */\r\n  unit: ''\r\n}\r\n\r\nfunction calcRows({ data, rowNum }) {\r\n  data.sort(({ value: a }, { value: b }) => {\r\n    if (a > b) return -1\r\n    if (a < b) return 1\r\n    if (a === b) return 0\r\n  })\r\n\r\n  const value = data.map(({ value }) => value)\r\n\r\n  const max = Math.max(...value) || 0\r\n\r\n  data = data.map((row, i) => ({\r\n    ...row,\r\n    ranking: i + 1,\r\n    percent: (row.value / max) * 100\r\n  }))\r\n\r\n  const rowLength = data.length\r\n\r\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n    data = [...data, ...data]\r\n  }\r\n\r\n  data = data.map((d, i) => ({ ...d, scroll: i }))\r\n\r\n  return data\r\n}\r\n\r\nconst ScrollRankingBoard = ({ config, className, style }) => {\r\n  const { width, height, domRef } = useAutoResize()\r\n\r\n  const [state, setState] = useState({\r\n    mergedConfig: null,\r\n\r\n    rows: [],\r\n\r\n    heights: []\r\n  })\r\n\r\n  const { mergedConfig, rows, heights } = state\r\n\r\n  const stateRef = useRef({\r\n    ...state,\r\n    rowsData: [],\r\n    avgHeight: 0,\r\n    animationIndex: 0\r\n  })\r\n\r\n  const heightRef = useRef(height)\r\n\r\n  Object.assign(stateRef.current, state)\r\n\r\n  function onResize(onresize = false) {\r\n    if (!mergedConfig) return\r\n\r\n    const heights = calcHeights(mergedConfig, onresize)\r\n\r\n    if (heights !== undefined) {\r\n      Object.assign(stateRef.current, { heights })\r\n      setState(state => ({ ...state, heights }))\r\n    }\r\n  }\r\n\r\n  function calcData() {\r\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n\r\n    const rows = calcRows(mergedConfig)\r\n\r\n    const heights = calcHeights(mergedConfig)\r\n\r\n    const data = { mergedConfig, rows }\r\n\r\n    heights !== undefined && Object.assign(data, { heights })\r\n\r\n    Object.assign(stateRef.current, data, { rowsData: rows, animationIndex: 0 })\r\n\r\n    setState(state => ({ ...state, ...data }))\r\n  }\r\n\r\n  function calcHeights({ rowNum, data }, onresize = false) {\r\n    const avgHeight = height / rowNum\r\n\r\n    Object.assign(stateRef.current, { avgHeight })\r\n\r\n    if (!onresize) {\r\n      return new Array(data.length).fill(avgHeight)\r\n    }\r\n  }\r\n\r\n  function * animation(start = false) {\r\n    let {\r\n      avgHeight,\r\n      animationIndex,\r\n      mergedConfig: { waitTime, carousel, rowNum },\r\n      rowsData\r\n    } = stateRef.current\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (start) yield new Promise(resolve => setTimeout(resolve, waitTime))\r\n\r\n    const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n    let rows = rowsData.slice(animationIndex)\r\n    rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n    const heights = new Array(rowLength).fill(avgHeight)\r\n    setState(state => ({ ...state, rows, heights }))\r\n\r\n    yield new Promise(resolve => setTimeout(resolve, 300))\r\n\r\n    animationIndex += animationNum\r\n\r\n    const back = animationIndex - rowLength\r\n    if (back >= 0) animationIndex = back\r\n\r\n    const newHeights = [...heights]\r\n    newHeights.splice(0, animationNum, ...new Array(animationNum).fill(0))\r\n\r\n    Object.assign(stateRef.current, { animationIndex })\r\n    setState(state => ({ ...state, heights: newHeights }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    calcData()\r\n\r\n    let start = true\r\n\r\n    function * loop() {\r\n      while (true) {\r\n        yield * animation(start)\r\n\r\n        start = false\r\n\r\n        const { waitTime } = stateRef.current.mergedConfig\r\n\r\n        yield new Promise(resolve => setTimeout(resolve, waitTime - 300))\r\n      }\r\n    }\r\n\r\n    const {\r\n      mergedConfig: { rowNum },\r\n      rows: rowsData\r\n    } = stateRef.current\r\n\r\n    const rowLength = rowsData.length\r\n\r\n    if (rowNum >= rowLength) return\r\n\r\n    return co(loop)\r\n  }, [config, domRef.current])\r\n\r\n  useEffect(() => {\r\n    if (heightRef.current === 0 && height !== 0) {\r\n      onResize()\r\n\r\n      heightRef.current = height\r\n    } else {\r\n      onResize(true)\r\n    }\r\n  }, [width, height, domRef.current])\r\n\r\n  const classNames = useMemo(\r\n    () => classnames('dv-scroll-ranking-board', className),\r\n    [className]\r\n  )\r\n\r\n  return (\r\n    <div className={classNames} style={style} ref={domRef}>\r\n      {rows.map((item, i) => (\r\n        <div\r\n          className='row-item'\r\n          key={item.toString() + item.scroll}\r\n          style={{ height: `${heights[i]}px` }}\r\n        >\r\n          <div className='ranking-info'>\r\n            <div className='rank'>No.{item.ranking}</div>\r\n            <div className='info-name'>{item.name}</div>\r\n            <div className='ranking-value'>\r\n              {item.value + mergedConfig.unit}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='ranking-column'>\r\n            <div\r\n              className='inside-column'\r\n              style={{ width: `${item.percent}%` }}\r\n            >\r\n              <div className='shine' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollRankingBoard.propTypes = {\r\n  config: PropTypes.object,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object\r\n}\r\n\r\n// 指定 props 的默认值：\r\nScrollRankingBoard.defaultProps = {\r\n  config: {}\r\n}\r\n\r\nexport default ScrollRankingBoard\r\n"],"names":["defaultConfig","calcRows","data","rowNum","sort","a","value","b","map","max","Math","row","i","rowLength","length","d","scroll","ScrollRankingBoard","animation","config","className","style","useAutoResize","width","height","domRef","useState","state","setState","mergedConfig","rows","heights","stateRef","useRef","heightRef","assign","current","onResize","onresize","calcHeights","undefined","calcData","deepMerge","deepClone","Object","rowsData","animationIndex","avgHeight","Array","fill","start","waitTime","carousel","Promise","setTimeout","resolve","slice","push","animationNum","back","splice","newHeights","loop","co","classNames","useMemo","classnames","item","toString","ranking","name","unit","percent","propTypes","PropTypes","object","string","defaultProps"],"mappings":"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"}